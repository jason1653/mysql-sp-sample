    DECLARE _JOKBO_SEQ INT;
	DECLARE _EXAM_TYPE_CD TINYINT;
	DECLARE _USERS_EXAM_PAPER_SEQ INT;
	DECLARE _YEAR_STRING VARCHAR(2);
	DECLARE _SEMESTER_STRING VARCHAR(10);
	DECLARE _TMP_NICKNAME VARCHAR(20);
	
	SET _USERS_EXAM_PAPER_SEQ = (SELECT USERS_EXAM_PAPER_SEQ FROM EXAM_PROBLEM WHERE QUESTION_SEQ = in_QUESTION_SEQ LIMIT 1);
	SET _YEAR_STRING = (SELECT TMP_GRADE_YEAR FROM USERS_EXAM_PAPER WHERE USERS_EXAM_PAPER_SEQ = _USERS_EXAM_PAPER_SEQ);
	SET _SEMESTER_STRING = (SELECT TMP_GRADE_SCORE FROM USERS_EXAM_PAPER WHERE USERS_EXAM_PAPER_SEQ = _USERS_EXAM_PAPER_SEQ);
	SET _EXAM_TYPE_CD = (SELECT EXAM_TYPE_CD FROM USERS_EXAM_PAPER WHERE USERS_EXAM_PAPER_SEQ = _USERS_EXAM_PAPER_SEQ);
	
	IF NOT EXISTS(SELECT * FROM JOKBO WHERE QUESTION_SEQ = in_QUESTION_SEQ) THEN
	
		INSERT INTO JOKBO (
			JOKBO_SEQ
			, UNIVERSITY_CD
			, EXAM_TYPE_CD
			, USERS_EXAM_PAPER_SEQ
			, QUESTION_SEQ
			, YEAR_STRING
			, SEMESTER_STRING
			, REGIST_DATETIME
		) 
		SELECT 
			NULL
			,LEFT(Q.LECTURE_INDIVIDUAL_CD, 5)
			,CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN 5 ELSE _EXAM_TYPE_CD END
			,_USERS_EXAM_PAPER_SEQ
			,Q.QUESTION_SEQ
			,CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN MID(Q.LECTURE_INDIVIDUAL_CD, 19, 2) ELSE _YEAR_STRING END
			,CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN MID(Q.LECTURE_INDIVIDUAL_CD, 21, 2) ELSE _SEMESTER_STRING END
			,CURRENT_TIMESTAMP()
		FROM QUESTION Q
		WHERE Q.QUESTION_SEQ = in_QUESTION_SEQ;
		
		SET _JOKBO_SEQ = LAST_INSERT_ID();
		/*
		INSERT INTO JOKBO_IMAGE (JOKBO_SEQ, FILENAME, FILE_ORDER) 
		SELECT _JOKBO_SEQ, FILENAME, FILE_ORDER FROM QUESTION_IMAGE WHERE QUESTION_SEQ = in_QUESTION_SEQ;
		*/
	ELSE
	
		SET _JOKBO_SEQ = (SELECT JOKBO_SEQ FROm JOKBO WHERE QUESTION_SEQ = in_QUESTION_SEQ);
		UPDATE JOKBO A, QUESTION B SET
			A.UNIVERSITY_CD = LEFT(B.LECTURE_INDIVIDUAL_CD, 5)
			,A.EXAM_TYPE_CD = CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN 5 ELSE _EXAM_TYPE_CD END
			,A.YEAR_STRING = CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN MID(B.LECTURE_INDIVIDUAL_CD, 19, 2) ELSE _YEAR_STRING END
			,A.SEMESTER_STRING = CASE WHEN _USERS_EXAM_PAPER_SEQ IS NULL THEN MID(B.LECTURE_INDIVIDUAL_CD, 21, 2) ELSE _SEMESTER_STRING END
		WHERE A.QUESTION_SEQ = B.QUESTION_SEQ
		AND B.QUESTION_SEQ = in_QUESTION_SEQ;
		
		
		
	END IF;
		
	
	
	IF NOT EXISTS(SELECT * FROM JOKBO_ANSWER WHERE JOKBO_SEQ = _JOKBO_SEQ) THEN

		IF EXISTS(SELECT * FROM QUESTION Q
			INNER JOIN QUESTION_ANSWER_QNA QAQ ON(Q.QUESTION_SEQ = QAQ.QUESTION_SEQ AND Q.TARGET_TUTOR_UID = QAQ.QUESTION_ANSWER_UID)
			WHERE QAQ.QUESTION_SEQ = in_QUESTION_SEQ 
		) THEN
		
		
			IF EXISTS(SELECT * FROM QUESTION_ANSWER_QNA WHERE QUESTION_SEQ = in_QUESTION_SEQ AND NICKNAME IS NOT NULL) THEN
				SET _TMP_NICKNAME = (SELECT NICKNAME FROM QUESTION_ANSWER_QNA WHERE QUESTION_SEQ = in_QUESTION_SEQ AND NICKNAME IS NOT NULL LIMIT 1);
			END IF;
		
			SET @CHECK := (
				SELECT QAQ.UID FROM QUESTION Q
				INNER JOIN QUESTION_ANSWER_QNA QAQ ON(Q.QUESTION_SEQ = QAQ.QUESTION_SEQ AND Q.TARGET_TUTOR_UID = QAQ.QUESTION_ANSWER_UID)
				WHERE QAQ.QUESTION_SEQ = in_QUESTION_SEQ 
				AND Q.QUESTION_STATUS_CD IN(5,6)
				ORDER BY QUESTION_ANSWER_QNA_SEQ ASC
				LIMIT 1
			);

			INSERT INTO JOKBO_ANSWER (
				JOKBO_SEQ
				,QNA_GUBUN
				,FROM_UID
				,FROM_NICKNAME
				,TO_UID
				,TO_NICKNAME
				,MESSAGE_TYPE
				,MESSAGE_CONTENTS
			) 
			SELECT 
				_JOKBO_SEQ
				,A.addQuestion
				,A.fromUID
				,CASE WHEN A.fromUID = 0 THEN _TMP_NICKNAME ELSE NULL END fromNickName
				,A.toUid 
				,CASE WHEN A.toUID = 0 THEN _TMP_NICKNAME ELSE NULL END toNickName
				,A.messageType
				,A.qnaTxt
			FROM (
				SELECT 
					 CASE WHEN QAQ.MEMBER_TYPE = 'T' THEN QAQ.QUESTION_ANSWER_UID ELSE Q.UID END as fromUID
					, CASE WHEN QAQ.MEMBER_TYPE = 'U' THEN QAQ.QUESTION_ANSWER_UID ELSE Q.UID END as toUID
					, QAQ.NICKNAME as nickName
					, QAQ.MEMBER_TYPE as memberType
					, QAQ.MESSAGE_TYPE	as messageType
					, QAQ.QNA_TXT as qnaTxt
					, CASE WHEN CASE WHEN QAQ.UID <> @CHECK THEN @CHECK := 0 ELSE @CHECK := QAQ.UID END > 0 THEN 0 ELSE 1 END addQuestion
				FROM QUESTION Q
				INNER JOIN QUESTION_ANSWER_QNA QAQ ON(Q.QUESTION_SEQ = QAQ.QUESTION_SEQ AND Q.TARGET_TUTOR_UID = QAQ.QUESTION_ANSWER_UID)
				WHERE QAQ.QUESTION_SEQ = in_QUESTION_SEQ 
				AND Q.QUESTION_STATUS_CD IN(5,6)
				ORDER BY QUESTION_ANSWER_QNA_SEQ ASC
			) A;
		END IF;
	END IF;